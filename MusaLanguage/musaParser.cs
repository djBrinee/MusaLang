//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Users\moroc\Desktop\UNIVERSIDAD\Construccion\musa\MusaLang\MusaLanguage\musa.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class musaParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		FOR=1, WHILE=2, IMP=3, BOOLEAN=4, IF=5, THEN=6, ELSE=7, NUM=8, SENT=9, 
		PALABRA=10, ID=11, WORD=12, COMA=13, QUOTE=14, SUM=15, DIF=16, DIV=17, 
		MULT=18, ASSIGN=19, INSEP=20, SBR=21, EBR=22, SPAR=23, EPAR=24, SEP=25, 
		OP=26, EQUAL=27, WS=28, SK2=29, SK3=30;
	public const int
		RULE_musa = 0, RULE_comando = 1, RULE_loopFor = 2, RULE_loopWhile = 3, 
		RULE_condicion = 4, RULE_incremento = 5, RULE_comp = 6, RULE_else = 7, 
		RULE_impresion = 8, RULE_asignacion = 9, RULE_expresion = 10, RULE_termino = 11, 
		RULE_factor = 12;
	public static readonly string[] ruleNames = {
		"musa", "comando", "loopFor", "loopWhile", "condicion", "incremento", 
		"comp", "else", "impresion", "asignacion", "expresion", "termino", "factor"
	};

	private static readonly string[] _LiteralNames = {
		null, "'for'", "'while'", "'monta'", null, "'if'", "'then'", "'else'", 
		null, null, null, null, null, "','", "'\"'", "'+'", "'-'", "'/'", "'*'", 
		"'<-'", "';'", "'['", "']'", "'('", "')'", "' '", null, "'='", "'\n'", 
		"'\r'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "FOR", "WHILE", "IMP", "BOOLEAN", "IF", "THEN", "ELSE", "NUM", "SENT", 
		"PALABRA", "ID", "WORD", "COMA", "QUOTE", "SUM", "DIF", "DIV", "MULT", 
		"ASSIGN", "INSEP", "SBR", "EBR", "SPAR", "EPAR", "SEP", "OP", "EQUAL", 
		"WS", "SK2", "SK3"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "musa.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static musaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public musaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public musaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class MusaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(musaParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ComandoContext[] comando() {
			return GetRuleContexts<ComandoContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComandoContext comando(int i) {
			return GetRuleContext<ComandoContext>(i);
		}
		public MusaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_musa; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImusaVisitor<TResult> typedVisitor = visitor as ImusaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMusa(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MusaContext musa() {
		MusaContext _localctx = new MusaContext(Context, State);
		EnterRule(_localctx, 0, RULE_musa);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 27;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 26;
				comando();
				}
				}
				State = 29;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FOR) | (1L << WHILE) | (1L << IMP) | (1L << IF) | (1L << ID))) != 0) );
			State = 31;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComandoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AsignacionContext asignacion() {
			return GetRuleContext<AsignacionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondicionContext condicion() {
			return GetRuleContext<CondicionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImpresionContext impresion() {
			return GetRuleContext<ImpresionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopForContext loopFor() {
			return GetRuleContext<LoopForContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopWhileContext loopWhile() {
			return GetRuleContext<LoopWhileContext>(0);
		}
		public ComandoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comando; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImusaVisitor<TResult> typedVisitor = visitor as ImusaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComando(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComandoContext comando() {
		ComandoContext _localctx = new ComandoContext(Context, State);
		EnterRule(_localctx, 2, RULE_comando);
		try {
			State = 38;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 33;
				asignacion();
				}
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 34;
				condicion();
				}
				}
				break;
			case IMP:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 35;
				impresion();
				}
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 4);
				{
				{
				State = 36;
				loopFor();
				}
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 37;
				loopWhile();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopForContext : ParserRuleContext {
		public LoopForContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopFor; } }
	 
		public LoopForContext() { }
		public virtual void CopyFrom(LoopForContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StandardForContext : LoopForContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(musaParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPAR() { return GetToken(musaParser.SPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AsignacionContext asignacion() {
			return GetRuleContext<AsignacionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSEP() { return GetToken(musaParser.INSEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IncrementoContext incremento() {
			return GetRuleContext<IncrementoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EPAR() { return GetToken(musaParser.EPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SBR() { return GetToken(musaParser.SBR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EBR() { return GetToken(musaParser.EBR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompContext comp() {
			return GetRuleContext<CompContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEP() { return GetTokens(musaParser.SEP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEP(int i) {
			return GetToken(musaParser.SEP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComandoContext[] comando() {
			return GetRuleContexts<ComandoContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComandoContext comando(int i) {
			return GetRuleContext<ComandoContext>(i);
		}
		public StandardForContext(LoopForContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImusaVisitor<TResult> typedVisitor = visitor as ImusaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStandardFor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanForContext : LoopForContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(musaParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPAR() { return GetToken(musaParser.SPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AsignacionContext asignacion() {
			return GetRuleContext<AsignacionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSEP() { return GetToken(musaParser.INSEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IncrementoContext incremento() {
			return GetRuleContext<IncrementoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EPAR() { return GetToken(musaParser.EPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SBR() { return GetToken(musaParser.SBR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EBR() { return GetToken(musaParser.EBR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(musaParser.BOOLEAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEP() { return GetTokens(musaParser.SEP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEP(int i) {
			return GetToken(musaParser.SEP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComandoContext[] comando() {
			return GetRuleContexts<ComandoContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComandoContext comando(int i) {
			return GetRuleContext<ComandoContext>(i);
		}
		public BooleanForContext(LoopForContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImusaVisitor<TResult> typedVisitor = visitor as ImusaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanFor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopForContext loopFor() {
		LoopForContext _localctx = new LoopForContext(Context, State);
		EnterRule(_localctx, 4, RULE_loopFor);
		int _la;
		try {
			State = 130;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				_localctx = new StandardForContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 40;
				Match(FOR);
				State = 44;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SEP) {
					{
					{
					State = 41;
					Match(SEP);
					}
					}
					State = 46;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 47;
				Match(SPAR);
				State = 51;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SEP) {
					{
					{
					State = 48;
					Match(SEP);
					}
					}
					State = 53;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 54;
				asignacion();
				State = 58;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SEP) {
					{
					{
					State = 55;
					Match(SEP);
					}
					}
					State = 60;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				{
				State = 61;
				comp();
				}
				State = 62;
				Match(INSEP);
				State = 66;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SEP) {
					{
					{
					State = 63;
					Match(SEP);
					}
					}
					State = 68;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 69;
				incremento();
				State = 73;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SEP) {
					{
					{
					State = 70;
					Match(SEP);
					}
					}
					State = 75;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 76;
				Match(EPAR);
				State = 77;
				Match(SBR);
				State = 79;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 78;
					comando();
					}
					}
					State = 81;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FOR) | (1L << WHILE) | (1L << IMP) | (1L << IF) | (1L << ID))) != 0) );
				State = 83;
				Match(EBR);
				}
				break;
			case 2:
				_localctx = new BooleanForContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 85;
				Match(FOR);
				State = 89;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SEP) {
					{
					{
					State = 86;
					Match(SEP);
					}
					}
					State = 91;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 92;
				Match(SPAR);
				State = 96;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SEP) {
					{
					{
					State = 93;
					Match(SEP);
					}
					}
					State = 98;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 99;
				asignacion();
				State = 103;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SEP) {
					{
					{
					State = 100;
					Match(SEP);
					}
					}
					State = 105;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				{
				State = 106;
				Match(BOOLEAN);
				}
				State = 107;
				Match(INSEP);
				State = 111;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SEP) {
					{
					{
					State = 108;
					Match(SEP);
					}
					}
					State = 113;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 114;
				incremento();
				State = 118;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SEP) {
					{
					{
					State = 115;
					Match(SEP);
					}
					}
					State = 120;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 121;
				Match(EPAR);
				State = 122;
				Match(SBR);
				State = 124;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 123;
					comando();
					}
					}
					State = 126;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FOR) | (1L << WHILE) | (1L << IMP) | (1L << IF) | (1L << ID))) != 0) );
				State = 128;
				Match(EBR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopWhileContext : ParserRuleContext {
		public LoopWhileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopWhile; } }
	 
		public LoopWhileContext() { }
		public virtual void CopyFrom(LoopWhileContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConditionWhileContext : LoopWhileContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(musaParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPAR() { return GetToken(musaParser.SPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EPAR() { return GetToken(musaParser.EPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SBR() { return GetToken(musaParser.SBR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EBR() { return GetToken(musaParser.EBR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompContext comp() {
			return GetRuleContext<CompContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEP() { return GetTokens(musaParser.SEP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEP(int i) {
			return GetToken(musaParser.SEP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComandoContext[] comando() {
			return GetRuleContexts<ComandoContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComandoContext comando(int i) {
			return GetRuleContext<ComandoContext>(i);
		}
		public ConditionWhileContext(LoopWhileContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImusaVisitor<TResult> typedVisitor = visitor as ImusaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionWhile(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanWhileContext : LoopWhileContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(musaParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPAR() { return GetToken(musaParser.SPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EPAR() { return GetToken(musaParser.EPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SBR() { return GetToken(musaParser.SBR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EBR() { return GetToken(musaParser.EBR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(musaParser.BOOLEAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEP() { return GetTokens(musaParser.SEP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEP(int i) {
			return GetToken(musaParser.SEP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComandoContext[] comando() {
			return GetRuleContexts<ComandoContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComandoContext comando(int i) {
			return GetRuleContext<ComandoContext>(i);
		}
		public BooleanWhileContext(LoopWhileContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImusaVisitor<TResult> typedVisitor = visitor as ImusaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanWhile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopWhileContext loopWhile() {
		LoopWhileContext _localctx = new LoopWhileContext(Context, State);
		EnterRule(_localctx, 6, RULE_loopWhile);
		int _la;
		try {
			State = 168;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				_localctx = new ConditionWhileContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 132;
				Match(WHILE);
				State = 136;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SEP) {
					{
					{
					State = 133;
					Match(SEP);
					}
					}
					State = 138;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 139;
				Match(SPAR);
				{
				State = 140;
				comp();
				}
				State = 141;
				Match(EPAR);
				State = 142;
				Match(SBR);
				State = 144;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 143;
					comando();
					}
					}
					State = 146;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FOR) | (1L << WHILE) | (1L << IMP) | (1L << IF) | (1L << ID))) != 0) );
				State = 148;
				Match(EBR);
				}
				break;
			case 2:
				_localctx = new BooleanWhileContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 150;
				Match(WHILE);
				State = 154;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SEP) {
					{
					{
					State = 151;
					Match(SEP);
					}
					}
					State = 156;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 157;
				Match(SPAR);
				{
				State = 158;
				Match(BOOLEAN);
				}
				State = 159;
				Match(EPAR);
				State = 160;
				Match(SBR);
				State = 162;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 161;
					comando();
					}
					}
					State = 164;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FOR) | (1L << WHILE) | (1L << IMP) | (1L << IF) | (1L << ID))) != 0) );
				State = 166;
				Match(EBR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondicionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(musaParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEP() { return GetTokens(musaParser.SEP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEP(int i) {
			return GetToken(musaParser.SEP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompContext comp() {
			return GetRuleContext<CompContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(musaParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SBR() { return GetToken(musaParser.SBR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EBR() { return GetToken(musaParser.EBR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ComandoContext[] comando() {
			return GetRuleContexts<ComandoContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComandoContext comando(int i) {
			return GetRuleContext<ComandoContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseContext @else() {
			return GetRuleContext<ElseContext>(0);
		}
		public CondicionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condicion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImusaVisitor<TResult> typedVisitor = visitor as ImusaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondicion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CondicionContext condicion() {
		CondicionContext _localctx = new CondicionContext(Context, State);
		EnterRule(_localctx, 8, RULE_condicion);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170;
			Match(IF);
			State = 171;
			Match(SEP);
			State = 172;
			comp();
			State = 174;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 173;
				Match(SEP);
				}
				}
				State = 176;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==SEP );
			State = 178;
			Match(THEN);
			State = 182;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEP) {
				{
				{
				State = 179;
				Match(SEP);
				}
				}
				State = 184;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 185;
			Match(SBR);
			State = 187;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 186;
				comando();
				}
				}
				State = 189;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FOR) | (1L << WHILE) | (1L << IMP) | (1L << IF) | (1L << ID))) != 0) );
			State = 191;
			Match(EBR);
			State = 193;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 192;
				@else();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncrementoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(musaParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SUM() { return GetTokens(musaParser.SUM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUM(int i) {
			return GetToken(musaParser.SUM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(musaParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(musaParser.NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIF() { return GetTokens(musaParser.DIF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIF(int i) {
			return GetToken(musaParser.DIF, i);
		}
		public IncrementoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_incremento; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImusaVisitor<TResult> typedVisitor = visitor as ImusaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncremento(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncrementoContext incremento() {
		IncrementoContext _localctx = new IncrementoContext(Context, State);
		EnterRule(_localctx, 10, RULE_incremento);
		try {
			State = 209;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 195;
				Match(ID);
				State = 196;
				Match(SUM);
				State = 197;
				Match(EQUAL);
				State = 198;
				Match(NUM);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 199;
				Match(ID);
				State = 200;
				Match(DIF);
				State = 201;
				Match(EQUAL);
				State = 202;
				Match(NUM);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 203;
				Match(ID);
				State = 204;
				Match(SUM);
				State = 205;
				Match(SUM);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 206;
				Match(ID);
				State = 207;
				Match(DIF);
				State = 208;
				Match(DIF);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP() { return GetToken(musaParser.OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(musaParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(musaParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NUM() { return GetTokens(musaParser.NUM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM(int i) {
			return GetToken(musaParser.NUM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEP() { return GetTokens(musaParser.SEP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEP(int i) {
			return GetToken(musaParser.SEP, i);
		}
		public CompContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImusaVisitor<TResult> typedVisitor = visitor as ImusaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompContext comp() {
		CompContext _localctx = new CompContext(Context, State);
		EnterRule(_localctx, 12, RULE_comp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			{
			State = 211;
			_la = TokenStream.LA(1);
			if ( !(_la==NUM || _la==ID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 215;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEP) {
				{
				{
				State = 212;
				Match(SEP);
				}
				}
				State = 217;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 218;
			Match(OP);
			State = 222;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEP) {
				{
				{
				State = 219;
				Match(SEP);
				}
				}
				State = 224;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 225;
			_la = TokenStream.LA(1);
			if ( !(_la==NUM || _la==ID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(musaParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SBR() { return GetToken(musaParser.SBR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EBR() { return GetToken(musaParser.EBR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ComandoContext[] comando() {
			return GetRuleContexts<ComandoContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComandoContext comando(int i) {
			return GetRuleContext<ComandoContext>(i);
		}
		public ElseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImusaVisitor<TResult> typedVisitor = visitor as ImusaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseContext @else() {
		ElseContext _localctx = new ElseContext(Context, State);
		EnterRule(_localctx, 14, RULE_else);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 227;
			Match(ELSE);
			State = 228;
			Match(SBR);
			State = 230;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 229;
				comando();
				}
				}
				State = 232;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FOR) | (1L << WHILE) | (1L << IMP) | (1L << IF) | (1L << ID))) != 0) );
			State = 234;
			Match(EBR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImpresionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMP() { return GetToken(musaParser.IMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPAR() { return GetToken(musaParser.SPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EPAR() { return GetToken(musaParser.EPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSEP() { return GetToken(musaParser.INSEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SENT() { return GetToken(musaParser.SENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(musaParser.ID, 0); }
		public ImpresionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_impresion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImusaVisitor<TResult> typedVisitor = visitor as ImusaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImpresion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImpresionContext impresion() {
		ImpresionContext _localctx = new ImpresionContext(Context, State);
		EnterRule(_localctx, 16, RULE_impresion);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 236;
			Match(IMP);
			State = 237;
			Match(SPAR);
			State = 238;
			_la = TokenStream.LA(1);
			if ( !(_la==SENT || _la==ID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 239;
			Match(EPAR);
			State = 240;
			Match(INSEP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsignacionContext : ParserRuleContext {
		public AsignacionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asignacion; } }
	 
		public AsignacionContext() { }
		public virtual void CopyFrom(AsignacionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StringContext : AsignacionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(musaParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(musaParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SENT() { return GetToken(musaParser.SENT, 0); }
		public StringContext(AsignacionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImusaVisitor<TResult> typedVisitor = visitor as ImusaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntContext : AsignacionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(musaParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(musaParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSEP() { return GetToken(musaParser.INSEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEP() { return GetTokens(musaParser.SEP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEP(int i) {
			return GetToken(musaParser.SEP, i);
		}
		public IntContext(AsignacionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImusaVisitor<TResult> typedVisitor = visitor as ImusaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsignacionContext asignacion() {
		AsignacionContext _localctx = new AsignacionContext(Context, State);
		EnterRule(_localctx, 18, RULE_asignacion);
		int _la;
		try {
			State = 268;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				_localctx = new IntContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 242;
				Match(ID);
				State = 246;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SEP) {
					{
					{
					State = 243;
					Match(SEP);
					}
					}
					State = 248;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 249;
				Match(ASSIGN);
				State = 253;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SEP) {
					{
					{
					State = 250;
					Match(SEP);
					}
					}
					State = 255;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 256;
				expresion(0);
				State = 260;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SEP) {
					{
					{
					State = 257;
					Match(SEP);
					}
					}
					State = 262;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 263;
				Match(INSEP);
				}
				break;
			case 2:
				_localctx = new StringContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 265;
				Match(ID);
				State = 266;
				Match(ASSIGN);
				State = 267;
				Match(SENT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpresionContext : ParserRuleContext {
		public ExpresionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expresion; } }
	 
		public ExpresionContext() { }
		public virtual void CopyFrom(ExpresionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SumOResContext : ExpresionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminoContext termino() {
			return GetRuleContext<TerminoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUM() { return GetToken(musaParser.SUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIF() { return GetToken(musaParser.DIF, 0); }
		public SumOResContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImusaVisitor<TResult> typedVisitor = visitor as ImusaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSumORes(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TerminoSoloContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public TerminoContext termino() {
			return GetRuleContext<TerminoContext>(0);
		}
		public TerminoSoloContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImusaVisitor<TResult> typedVisitor = visitor as ImusaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerminoSolo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpresionContext expresion() {
		return expresion(0);
	}

	private ExpresionContext expresion(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpresionContext _localctx = new ExpresionContext(Context, _parentState);
		ExpresionContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_expresion, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new TerminoSoloContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 271;
			termino(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 278;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new SumOResContext(new ExpresionContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_expresion);
					State = 273;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 274;
					((SumOResContext)_localctx).op = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==SUM || _la==DIF) ) {
						((SumOResContext)_localctx).op = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 275;
					termino(0);
					}
					} 
				}
				State = 280;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TerminoContext : ParserRuleContext {
		public TerminoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_termino; } }
	 
		public TerminoContext() { }
		public virtual void CopyFrom(TerminoContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MulODivContext : TerminoContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public TerminoContext termino() {
			return GetRuleContext<TerminoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(musaParser.MULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(musaParser.DIV, 0); }
		public MulODivContext(TerminoContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImusaVisitor<TResult> typedVisitor = visitor as ImusaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulODiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FactorSoloContext : TerminoContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public FactorSoloContext(TerminoContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImusaVisitor<TResult> typedVisitor = visitor as ImusaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactorSolo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TerminoContext termino() {
		return termino(0);
	}

	private TerminoContext termino(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TerminoContext _localctx = new TerminoContext(Context, _parentState);
		TerminoContext _prevctx = _localctx;
		int _startState = 22;
		EnterRecursionRule(_localctx, 22, RULE_termino, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new FactorSoloContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 282;
			factor();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 289;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new MulODivContext(new TerminoContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_termino);
					State = 284;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 285;
					((MulODivContext)_localctx).op = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==DIV || _la==MULT) ) {
						((MulODivContext)_localctx).op = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 286;
					factor();
					}
					} 
				}
				State = 291;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
	 
		public FactorContext() { }
		public virtual void CopyFrom(FactorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SubexpresionContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPAR() { return GetToken(musaParser.SPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EPAR() { return GetToken(musaParser.EPAR, 0); }
		public SubexpresionContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImusaVisitor<TResult> typedVisitor = visitor as ImusaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubexpresion(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumeroContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(musaParser.NUM, 0); }
		public NumeroContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImusaVisitor<TResult> typedVisitor = visitor as ImusaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumero(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentificadorContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(musaParser.ID, 0); }
		public IdentificadorContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImusaVisitor<TResult> typedVisitor = visitor as ImusaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentificador(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 24, RULE_factor);
		try {
			State = 298;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUM:
				_localctx = new NumeroContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 292;
				Match(NUM);
				}
				break;
			case ID:
				_localctx = new IdentificadorContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 293;
				Match(ID);
				}
				break;
			case SPAR:
				_localctx = new SubexpresionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 294;
				Match(SPAR);
				State = 295;
				expresion(0);
				State = 296;
				Match(EPAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 10: return expresion_sempred((ExpresionContext)_localctx, predIndex);
		case 11: return termino_sempred((TerminoContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expresion_sempred(ExpresionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}
	private bool termino_sempred(TerminoContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', ' ', '\x12F', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x3', '\x2', '\x6', '\x2', '\x1E', '\n', '\x2', '\r', '\x2', '\xE', 
		'\x2', '\x1F', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', ')', '\n', '\x3', 
		'\x3', '\x4', '\x3', '\x4', '\a', '\x4', '-', '\n', '\x4', '\f', '\x4', 
		'\xE', '\x4', '\x30', '\v', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', 
		'\x34', '\n', '\x4', '\f', '\x4', '\xE', '\x4', '\x37', '\v', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\a', '\x4', ';', '\n', '\x4', '\f', '\x4', '\xE', 
		'\x4', '>', '\v', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', 
		'\x4', '\x43', '\n', '\x4', '\f', '\x4', '\xE', '\x4', '\x46', '\v', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\a', '\x4', 'J', '\n', '\x4', '\f', '\x4', 
		'\xE', '\x4', 'M', '\v', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x6', '\x4', 'R', '\n', '\x4', '\r', '\x4', '\xE', '\x4', 'S', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', 'Z', '\n', 
		'\x4', '\f', '\x4', '\xE', '\x4', ']', '\v', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\a', '\x4', '\x61', '\n', '\x4', '\f', '\x4', '\xE', '\x4', '\x64', 
		'\v', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', 'h', '\n', '\x4', 
		'\f', '\x4', '\xE', '\x4', 'k', '\v', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\a', '\x4', 'p', '\n', '\x4', '\f', '\x4', '\xE', '\x4', 
		's', '\v', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', 'w', '\n', 
		'\x4', '\f', '\x4', '\xE', '\x4', 'z', '\v', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x6', '\x4', '\x7F', '\n', '\x4', '\r', '\x4', '\xE', 
		'\x4', '\x80', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\x85', '\n', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '\x89', '\n', '\x5', '\f', 
		'\x5', '\xE', '\x5', '\x8C', '\v', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x6', '\x5', '\x93', '\n', 
		'\x5', '\r', '\x5', '\xE', '\x5', '\x94', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\a', '\x5', '\x9B', '\n', '\x5', '\f', '\x5', 
		'\xE', '\x5', '\x9E', '\v', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x6', '\x5', '\xA5', '\n', '\x5', 
		'\r', '\x5', '\xE', '\x5', '\xA6', '\x3', '\x5', '\x3', '\x5', '\x5', 
		'\x5', '\xAB', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x6', '\x6', '\xB1', '\n', '\x6', '\r', '\x6', '\xE', '\x6', 
		'\xB2', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', '\xB7', '\n', '\x6', 
		'\f', '\x6', '\xE', '\x6', '\xBA', '\v', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x6', '\x6', '\xBE', '\n', '\x6', '\r', '\x6', '\xE', '\x6', '\xBF', 
		'\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\xC4', '\n', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\xD4', '\n', '\a', '\x3', 
		'\b', '\x3', '\b', '\a', '\b', '\xD8', '\n', '\b', '\f', '\b', '\xE', 
		'\b', '\xDB', '\v', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', '\xDF', 
		'\n', '\b', '\f', '\b', '\xE', '\b', '\xE2', '\v', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x6', '\t', '\xE9', 
		'\n', '\t', '\r', '\t', '\xE', '\t', '\xEA', '\x3', '\t', '\x3', '\t', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\v', '\x3', '\v', '\a', '\v', '\xF7', '\n', '\v', '\f', 
		'\v', '\xE', '\v', '\xFA', '\v', '\v', '\x3', '\v', '\x3', '\v', '\a', 
		'\v', '\xFE', '\n', '\v', '\f', '\v', '\xE', '\v', '\x101', '\v', '\v', 
		'\x3', '\v', '\x3', '\v', '\a', '\v', '\x105', '\n', '\v', '\f', '\v', 
		'\xE', '\v', '\x108', '\v', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x5', '\v', '\x10F', '\n', '\v', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\a', 
		'\f', '\x117', '\n', '\f', '\f', '\f', '\xE', '\f', '\x11A', '\v', '\f', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\a', '\r', '\x122', '\n', '\r', '\f', '\r', '\xE', '\r', '\x125', 
		'\v', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x5', '\xE', '\x12D', '\n', '\xE', '\x3', '\xE', 
		'\x2', '\x4', '\x16', '\x18', '\xF', '\x2', '\x4', '\x6', '\b', '\n', 
		'\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x2', '\x6', 
		'\x4', '\x2', '\n', '\n', '\r', '\r', '\x4', '\x2', '\v', '\v', '\r', 
		'\r', '\x3', '\x2', '\x11', '\x12', '\x3', '\x2', '\x13', '\x14', '\x2', 
		'\x14A', '\x2', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x4', '(', '\x3', 
		'\x2', '\x2', '\x2', '\x6', '\x84', '\x3', '\x2', '\x2', '\x2', '\b', 
		'\xAA', '\x3', '\x2', '\x2', '\x2', '\n', '\xAC', '\x3', '\x2', '\x2', 
		'\x2', '\f', '\xD3', '\x3', '\x2', '\x2', '\x2', '\xE', '\xD5', '\x3', 
		'\x2', '\x2', '\x2', '\x10', '\xE5', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'\xEE', '\x3', '\x2', '\x2', '\x2', '\x14', '\x10E', '\x3', '\x2', '\x2', 
		'\x2', '\x16', '\x110', '\x3', '\x2', '\x2', '\x2', '\x18', '\x11B', '\x3', 
		'\x2', '\x2', '\x2', '\x1A', '\x12C', '\x3', '\x2', '\x2', '\x2', '\x1C', 
		'\x1E', '\x5', '\x4', '\x3', '\x2', '\x1D', '\x1C', '\x3', '\x2', '\x2', 
		'\x2', '\x1E', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x1F', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\x1F', ' ', '\x3', '\x2', '\x2', '\x2', ' ', '!', 
		'\x3', '\x2', '\x2', '\x2', '!', '\"', '\a', '\x2', '\x2', '\x3', '\"', 
		'\x3', '\x3', '\x2', '\x2', '\x2', '#', ')', '\x5', '\x14', '\v', '\x2', 
		'$', ')', '\x5', '\n', '\x6', '\x2', '%', ')', '\x5', '\x12', '\n', '\x2', 
		'&', ')', '\x5', '\x6', '\x4', '\x2', '\'', ')', '\x5', '\b', '\x5', '\x2', 
		'(', '#', '\x3', '\x2', '\x2', '\x2', '(', '$', '\x3', '\x2', '\x2', '\x2', 
		'(', '%', '\x3', '\x2', '\x2', '\x2', '(', '&', '\x3', '\x2', '\x2', '\x2', 
		'(', '\'', '\x3', '\x2', '\x2', '\x2', ')', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '*', '.', '\a', '\x3', '\x2', '\x2', '+', '-', '\a', '\x1B', '\x2', 
		'\x2', ',', '+', '\x3', '\x2', '\x2', '\x2', '-', '\x30', '\x3', '\x2', 
		'\x2', '\x2', '.', ',', '\x3', '\x2', '\x2', '\x2', '.', '/', '\x3', '\x2', 
		'\x2', '\x2', '/', '\x31', '\x3', '\x2', '\x2', '\x2', '\x30', '.', '\x3', 
		'\x2', '\x2', '\x2', '\x31', '\x35', '\a', '\x19', '\x2', '\x2', '\x32', 
		'\x34', '\a', '\x1B', '\x2', '\x2', '\x33', '\x32', '\x3', '\x2', '\x2', 
		'\x2', '\x34', '\x37', '\x3', '\x2', '\x2', '\x2', '\x35', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\x35', '\x36', '\x3', '\x2', '\x2', '\x2', '\x36', 
		'\x38', '\x3', '\x2', '\x2', '\x2', '\x37', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x38', '<', '\x5', '\x14', '\v', '\x2', '\x39', ';', '\a', '\x1B', 
		'\x2', '\x2', ':', '\x39', '\x3', '\x2', '\x2', '\x2', ';', '>', '\x3', 
		'\x2', '\x2', '\x2', '<', ':', '\x3', '\x2', '\x2', '\x2', '<', '=', '\x3', 
		'\x2', '\x2', '\x2', '=', '?', '\x3', '\x2', '\x2', '\x2', '>', '<', '\x3', 
		'\x2', '\x2', '\x2', '?', '@', '\x5', '\xE', '\b', '\x2', '@', '\x44', 
		'\a', '\x16', '\x2', '\x2', '\x41', '\x43', '\a', '\x1B', '\x2', '\x2', 
		'\x42', '\x41', '\x3', '\x2', '\x2', '\x2', '\x43', '\x46', '\x3', '\x2', 
		'\x2', '\x2', '\x44', '\x42', '\x3', '\x2', '\x2', '\x2', '\x44', '\x45', 
		'\x3', '\x2', '\x2', '\x2', '\x45', 'G', '\x3', '\x2', '\x2', '\x2', '\x46', 
		'\x44', '\x3', '\x2', '\x2', '\x2', 'G', 'K', '\x5', '\f', '\a', '\x2', 
		'H', 'J', '\a', '\x1B', '\x2', '\x2', 'I', 'H', '\x3', '\x2', '\x2', '\x2', 
		'J', 'M', '\x3', '\x2', '\x2', '\x2', 'K', 'I', '\x3', '\x2', '\x2', '\x2', 
		'K', 'L', '\x3', '\x2', '\x2', '\x2', 'L', 'N', '\x3', '\x2', '\x2', '\x2', 
		'M', 'K', '\x3', '\x2', '\x2', '\x2', 'N', 'O', '\a', '\x1A', '\x2', '\x2', 
		'O', 'Q', '\a', '\x17', '\x2', '\x2', 'P', 'R', '\x5', '\x4', '\x3', '\x2', 
		'Q', 'P', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\x3', '\x2', '\x2', '\x2', 
		'S', 'Q', '\x3', '\x2', '\x2', '\x2', 'S', 'T', '\x3', '\x2', '\x2', '\x2', 
		'T', 'U', '\x3', '\x2', '\x2', '\x2', 'U', 'V', '\a', '\x18', '\x2', '\x2', 
		'V', '\x85', '\x3', '\x2', '\x2', '\x2', 'W', '[', '\a', '\x3', '\x2', 
		'\x2', 'X', 'Z', '\a', '\x1B', '\x2', '\x2', 'Y', 'X', '\x3', '\x2', '\x2', 
		'\x2', 'Z', ']', '\x3', '\x2', '\x2', '\x2', '[', 'Y', '\x3', '\x2', '\x2', 
		'\x2', '[', '\\', '\x3', '\x2', '\x2', '\x2', '\\', '^', '\x3', '\x2', 
		'\x2', '\x2', ']', '[', '\x3', '\x2', '\x2', '\x2', '^', '\x62', '\a', 
		'\x19', '\x2', '\x2', '_', '\x61', '\a', '\x1B', '\x2', '\x2', '`', '_', 
		'\x3', '\x2', '\x2', '\x2', '\x61', '\x64', '\x3', '\x2', '\x2', '\x2', 
		'\x62', '`', '\x3', '\x2', '\x2', '\x2', '\x62', '\x63', '\x3', '\x2', 
		'\x2', '\x2', '\x63', '\x65', '\x3', '\x2', '\x2', '\x2', '\x64', '\x62', 
		'\x3', '\x2', '\x2', '\x2', '\x65', 'i', '\x5', '\x14', '\v', '\x2', '\x66', 
		'h', '\a', '\x1B', '\x2', '\x2', 'g', '\x66', '\x3', '\x2', '\x2', '\x2', 
		'h', 'k', '\x3', '\x2', '\x2', '\x2', 'i', 'g', '\x3', '\x2', '\x2', '\x2', 
		'i', 'j', '\x3', '\x2', '\x2', '\x2', 'j', 'l', '\x3', '\x2', '\x2', '\x2', 
		'k', 'i', '\x3', '\x2', '\x2', '\x2', 'l', 'm', '\a', '\x6', '\x2', '\x2', 
		'm', 'q', '\a', '\x16', '\x2', '\x2', 'n', 'p', '\a', '\x1B', '\x2', '\x2', 
		'o', 'n', '\x3', '\x2', '\x2', '\x2', 'p', 's', '\x3', '\x2', '\x2', '\x2', 
		'q', 'o', '\x3', '\x2', '\x2', '\x2', 'q', 'r', '\x3', '\x2', '\x2', '\x2', 
		'r', 't', '\x3', '\x2', '\x2', '\x2', 's', 'q', '\x3', '\x2', '\x2', '\x2', 
		't', 'x', '\x5', '\f', '\a', '\x2', 'u', 'w', '\a', '\x1B', '\x2', '\x2', 
		'v', 'u', '\x3', '\x2', '\x2', '\x2', 'w', 'z', '\x3', '\x2', '\x2', '\x2', 
		'x', 'v', '\x3', '\x2', '\x2', '\x2', 'x', 'y', '\x3', '\x2', '\x2', '\x2', 
		'y', '{', '\x3', '\x2', '\x2', '\x2', 'z', 'x', '\x3', '\x2', '\x2', '\x2', 
		'{', '|', '\a', '\x1A', '\x2', '\x2', '|', '~', '\a', '\x17', '\x2', '\x2', 
		'}', '\x7F', '\x5', '\x4', '\x3', '\x2', '~', '}', '\x3', '\x2', '\x2', 
		'\x2', '\x7F', '\x80', '\x3', '\x2', '\x2', '\x2', '\x80', '~', '\x3', 
		'\x2', '\x2', '\x2', '\x80', '\x81', '\x3', '\x2', '\x2', '\x2', '\x81', 
		'\x82', '\x3', '\x2', '\x2', '\x2', '\x82', '\x83', '\a', '\x18', '\x2', 
		'\x2', '\x83', '\x85', '\x3', '\x2', '\x2', '\x2', '\x84', '*', '\x3', 
		'\x2', '\x2', '\x2', '\x84', 'W', '\x3', '\x2', '\x2', '\x2', '\x85', 
		'\a', '\x3', '\x2', '\x2', '\x2', '\x86', '\x8A', '\a', '\x4', '\x2', 
		'\x2', '\x87', '\x89', '\a', '\x1B', '\x2', '\x2', '\x88', '\x87', '\x3', 
		'\x2', '\x2', '\x2', '\x89', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x8A', 
		'\x88', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8B', '\x3', '\x2', '\x2', 
		'\x2', '\x8B', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8A', '\x3', 
		'\x2', '\x2', '\x2', '\x8D', '\x8E', '\a', '\x19', '\x2', '\x2', '\x8E', 
		'\x8F', '\x5', '\xE', '\b', '\x2', '\x8F', '\x90', '\a', '\x1A', '\x2', 
		'\x2', '\x90', '\x92', '\a', '\x17', '\x2', '\x2', '\x91', '\x93', '\x5', 
		'\x4', '\x3', '\x2', '\x92', '\x91', '\x3', '\x2', '\x2', '\x2', '\x93', 
		'\x94', '\x3', '\x2', '\x2', '\x2', '\x94', '\x92', '\x3', '\x2', '\x2', 
		'\x2', '\x94', '\x95', '\x3', '\x2', '\x2', '\x2', '\x95', '\x96', '\x3', 
		'\x2', '\x2', '\x2', '\x96', '\x97', '\a', '\x18', '\x2', '\x2', '\x97', 
		'\xAB', '\x3', '\x2', '\x2', '\x2', '\x98', '\x9C', '\a', '\x4', '\x2', 
		'\x2', '\x99', '\x9B', '\a', '\x1B', '\x2', '\x2', '\x9A', '\x99', '\x3', 
		'\x2', '\x2', '\x2', '\x9B', '\x9E', '\x3', '\x2', '\x2', '\x2', '\x9C', 
		'\x9A', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9D', '\x3', '\x2', '\x2', 
		'\x2', '\x9D', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x9C', '\x3', 
		'\x2', '\x2', '\x2', '\x9F', '\xA0', '\a', '\x19', '\x2', '\x2', '\xA0', 
		'\xA1', '\a', '\x6', '\x2', '\x2', '\xA1', '\xA2', '\a', '\x1A', '\x2', 
		'\x2', '\xA2', '\xA4', '\a', '\x17', '\x2', '\x2', '\xA3', '\xA5', '\x5', 
		'\x4', '\x3', '\x2', '\xA4', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA5', 
		'\xA6', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA4', '\x3', '\x2', '\x2', 
		'\x2', '\xA6', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xA8', '\x3', 
		'\x2', '\x2', '\x2', '\xA8', '\xA9', '\a', '\x18', '\x2', '\x2', '\xA9', 
		'\xAB', '\x3', '\x2', '\x2', '\x2', '\xAA', '\x86', '\x3', '\x2', '\x2', 
		'\x2', '\xAA', '\x98', '\x3', '\x2', '\x2', '\x2', '\xAB', '\t', '\x3', 
		'\x2', '\x2', '\x2', '\xAC', '\xAD', '\a', '\a', '\x2', '\x2', '\xAD', 
		'\xAE', '\a', '\x1B', '\x2', '\x2', '\xAE', '\xB0', '\x5', '\xE', '\b', 
		'\x2', '\xAF', '\xB1', '\a', '\x1B', '\x2', '\x2', '\xB0', '\xAF', '\x3', 
		'\x2', '\x2', '\x2', '\xB1', '\xB2', '\x3', '\x2', '\x2', '\x2', '\xB2', 
		'\xB0', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB3', '\x3', '\x2', '\x2', 
		'\x2', '\xB3', '\xB4', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB8', '\a', 
		'\b', '\x2', '\x2', '\xB5', '\xB7', '\a', '\x1B', '\x2', '\x2', '\xB6', 
		'\xB5', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xBA', '\x3', '\x2', '\x2', 
		'\x2', '\xB8', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xB9', '\x3', 
		'\x2', '\x2', '\x2', '\xB9', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xBA', 
		'\xB8', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xBD', '\a', '\x17', '\x2', 
		'\x2', '\xBC', '\xBE', '\x5', '\x4', '\x3', '\x2', '\xBD', '\xBC', '\x3', 
		'\x2', '\x2', '\x2', '\xBE', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xBF', 
		'\xBD', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xC0', '\x3', '\x2', '\x2', 
		'\x2', '\xC0', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xC3', '\a', 
		'\x18', '\x2', '\x2', '\xC2', '\xC4', '\x5', '\x10', '\t', '\x2', '\xC3', 
		'\xC2', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xC4', '\x3', '\x2', '\x2', 
		'\x2', '\xC4', '\v', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC6', '\a', 
		'\r', '\x2', '\x2', '\xC6', '\xC7', '\a', '\x11', '\x2', '\x2', '\xC7', 
		'\xC8', '\a', '\x1D', '\x2', '\x2', '\xC8', '\xD4', '\a', '\n', '\x2', 
		'\x2', '\xC9', '\xCA', '\a', '\r', '\x2', '\x2', '\xCA', '\xCB', '\a', 
		'\x12', '\x2', '\x2', '\xCB', '\xCC', '\a', '\x1D', '\x2', '\x2', '\xCC', 
		'\xD4', '\a', '\n', '\x2', '\x2', '\xCD', '\xCE', '\a', '\r', '\x2', '\x2', 
		'\xCE', '\xCF', '\a', '\x11', '\x2', '\x2', '\xCF', '\xD4', '\a', '\x11', 
		'\x2', '\x2', '\xD0', '\xD1', '\a', '\r', '\x2', '\x2', '\xD1', '\xD2', 
		'\a', '\x12', '\x2', '\x2', '\xD2', '\xD4', '\a', '\x12', '\x2', '\x2', 
		'\xD3', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xC9', '\x3', '\x2', 
		'\x2', '\x2', '\xD3', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD0', 
		'\x3', '\x2', '\x2', '\x2', '\xD4', '\r', '\x3', '\x2', '\x2', '\x2', 
		'\xD5', '\xD9', '\t', '\x2', '\x2', '\x2', '\xD6', '\xD8', '\a', '\x1B', 
		'\x2', '\x2', '\xD7', '\xD6', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xDB', 
		'\x3', '\x2', '\x2', '\x2', '\xD9', '\xD7', '\x3', '\x2', '\x2', '\x2', 
		'\xD9', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xDC', '\x3', '\x2', 
		'\x2', '\x2', '\xDB', '\xD9', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xE0', 
		'\a', '\x1C', '\x2', '\x2', '\xDD', '\xDF', '\a', '\x1B', '\x2', '\x2', 
		'\xDE', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xDF', '\xE2', '\x3', '\x2', 
		'\x2', '\x2', '\xE0', '\xDE', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xE1', 
		'\x3', '\x2', '\x2', '\x2', '\xE1', '\xE3', '\x3', '\x2', '\x2', '\x2', 
		'\xE2', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xE4', '\t', '\x2', 
		'\x2', '\x2', '\xE4', '\xF', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE6', 
		'\a', '\t', '\x2', '\x2', '\xE6', '\xE8', '\a', '\x17', '\x2', '\x2', 
		'\xE7', '\xE9', '\x5', '\x4', '\x3', '\x2', '\xE8', '\xE7', '\x3', '\x2', 
		'\x2', '\x2', '\xE9', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xE8', 
		'\x3', '\x2', '\x2', '\x2', '\xEA', '\xEB', '\x3', '\x2', '\x2', '\x2', 
		'\xEB', '\xEC', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xED', '\a', '\x18', 
		'\x2', '\x2', '\xED', '\x11', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xEF', 
		'\a', '\x5', '\x2', '\x2', '\xEF', '\xF0', '\a', '\x19', '\x2', '\x2', 
		'\xF0', '\xF1', '\t', '\x3', '\x2', '\x2', '\xF1', '\xF2', '\a', '\x1A', 
		'\x2', '\x2', '\xF2', '\xF3', '\a', '\x16', '\x2', '\x2', '\xF3', '\x13', 
		'\x3', '\x2', '\x2', '\x2', '\xF4', '\xF8', '\a', '\r', '\x2', '\x2', 
		'\xF5', '\xF7', '\a', '\x1B', '\x2', '\x2', '\xF6', '\xF5', '\x3', '\x2', 
		'\x2', '\x2', '\xF7', '\xFA', '\x3', '\x2', '\x2', '\x2', '\xF8', '\xF6', 
		'\x3', '\x2', '\x2', '\x2', '\xF8', '\xF9', '\x3', '\x2', '\x2', '\x2', 
		'\xF9', '\xFB', '\x3', '\x2', '\x2', '\x2', '\xFA', '\xF8', '\x3', '\x2', 
		'\x2', '\x2', '\xFB', '\xFF', '\a', '\x15', '\x2', '\x2', '\xFC', '\xFE', 
		'\a', '\x1B', '\x2', '\x2', '\xFD', '\xFC', '\x3', '\x2', '\x2', '\x2', 
		'\xFE', '\x101', '\x3', '\x2', '\x2', '\x2', '\xFF', '\xFD', '\x3', '\x2', 
		'\x2', '\x2', '\xFF', '\x100', '\x3', '\x2', '\x2', '\x2', '\x100', '\x102', 
		'\x3', '\x2', '\x2', '\x2', '\x101', '\xFF', '\x3', '\x2', '\x2', '\x2', 
		'\x102', '\x106', '\x5', '\x16', '\f', '\x2', '\x103', '\x105', '\a', 
		'\x1B', '\x2', '\x2', '\x104', '\x103', '\x3', '\x2', '\x2', '\x2', '\x105', 
		'\x108', '\x3', '\x2', '\x2', '\x2', '\x106', '\x104', '\x3', '\x2', '\x2', 
		'\x2', '\x106', '\x107', '\x3', '\x2', '\x2', '\x2', '\x107', '\x109', 
		'\x3', '\x2', '\x2', '\x2', '\x108', '\x106', '\x3', '\x2', '\x2', '\x2', 
		'\x109', '\x10A', '\a', '\x16', '\x2', '\x2', '\x10A', '\x10F', '\x3', 
		'\x2', '\x2', '\x2', '\x10B', '\x10C', '\a', '\r', '\x2', '\x2', '\x10C', 
		'\x10D', '\a', '\x15', '\x2', '\x2', '\x10D', '\x10F', '\a', '\v', '\x2', 
		'\x2', '\x10E', '\xF4', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x10B', 
		'\x3', '\x2', '\x2', '\x2', '\x10F', '\x15', '\x3', '\x2', '\x2', '\x2', 
		'\x110', '\x111', '\b', '\f', '\x1', '\x2', '\x111', '\x112', '\x5', '\x18', 
		'\r', '\x2', '\x112', '\x118', '\x3', '\x2', '\x2', '\x2', '\x113', '\x114', 
		'\f', '\x4', '\x2', '\x2', '\x114', '\x115', '\t', '\x4', '\x2', '\x2', 
		'\x115', '\x117', '\x5', '\x18', '\r', '\x2', '\x116', '\x113', '\x3', 
		'\x2', '\x2', '\x2', '\x117', '\x11A', '\x3', '\x2', '\x2', '\x2', '\x118', 
		'\x116', '\x3', '\x2', '\x2', '\x2', '\x118', '\x119', '\x3', '\x2', '\x2', 
		'\x2', '\x119', '\x17', '\x3', '\x2', '\x2', '\x2', '\x11A', '\x118', 
		'\x3', '\x2', '\x2', '\x2', '\x11B', '\x11C', '\b', '\r', '\x1', '\x2', 
		'\x11C', '\x11D', '\x5', '\x1A', '\xE', '\x2', '\x11D', '\x123', '\x3', 
		'\x2', '\x2', '\x2', '\x11E', '\x11F', '\f', '\x4', '\x2', '\x2', '\x11F', 
		'\x120', '\t', '\x5', '\x2', '\x2', '\x120', '\x122', '\x5', '\x1A', '\xE', 
		'\x2', '\x121', '\x11E', '\x3', '\x2', '\x2', '\x2', '\x122', '\x125', 
		'\x3', '\x2', '\x2', '\x2', '\x123', '\x121', '\x3', '\x2', '\x2', '\x2', 
		'\x123', '\x124', '\x3', '\x2', '\x2', '\x2', '\x124', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\x125', '\x123', '\x3', '\x2', '\x2', '\x2', '\x126', 
		'\x12D', '\a', '\n', '\x2', '\x2', '\x127', '\x12D', '\a', '\r', '\x2', 
		'\x2', '\x128', '\x129', '\a', '\x19', '\x2', '\x2', '\x129', '\x12A', 
		'\x5', '\x16', '\f', '\x2', '\x12A', '\x12B', '\a', '\x1A', '\x2', '\x2', 
		'\x12B', '\x12D', '\x3', '\x2', '\x2', '\x2', '\x12C', '\x126', '\x3', 
		'\x2', '\x2', '\x2', '\x12C', '\x127', '\x3', '\x2', '\x2', '\x2', '\x12C', 
		'\x128', '\x3', '\x2', '\x2', '\x2', '\x12D', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '%', '\x1F', '(', '.', '\x35', '<', '\x44', 'K', 'S', '[', '\x62', 
		'i', 'q', 'x', '\x80', '\x84', '\x8A', '\x94', '\x9C', '\xA6', '\xAA', 
		'\xB2', '\xB8', '\xBF', '\xC3', '\xD3', '\xD9', '\xE0', '\xEA', '\xF8', 
		'\xFF', '\x106', '\x10E', '\x118', '\x123', '\x12C',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
